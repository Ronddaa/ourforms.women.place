import axios from "axios";
import { unifiedusersCollection } from "./db/models/unifiedusers.js";
import {
  upsertunifieduser,
  updateunifieduserById,
} from "./services/unifiedusers.js";
import env from "./utils/env.js";

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è MonoBank, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∏ –±—É–¥—É—Ç –≤ –≤–∞—à–µ–º env —Ñ–∞–π–ª–µ
const monoBankToken = env("MONOBANK_TOKEN");
const monoBankRedirectUrl = env(
  "MONOBANK_REDIRECT_URL",
  "https://ourforms.women.place/sexiqstandart"
);
const monoBankWebhookUrl = env(
  "MONOBANK_WEBHOOK_URL",
  "https://ourforms.women.place/api/payment-callback"
);

// ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ ----------
export const createPaymentHandler = async (req, res, next) => {
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç–µ 'user'.
  const { user } = req.body;

  if (!user || !user.sexIQ || !user.sexIQ.totalAmount) {
    return res.status(400).json({
      error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è user –∏–ª–∏ sexIQ –≤ –∑–∞–ø—Ä–æ—Å–µ.",
    });
  }

  try {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–≤–ª–µ–∫–∞–µ–º sexIQ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ 'user', –∫–∞–∫ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
    const { sexIQ, ...restOfUser } = user;
    const totalAmountFromFrontend = sexIQ.totalAmount;

    if (
      typeof totalAmountFromFrontend !== "number" ||
      totalAmountFromFrontend <= 0
    ) {
      return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã" });
    }

    // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º 'user' –∏ 'sexIQ' –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Å–µ—Ä–≤–∏—Å upsertunifieduser
    const { unifieduser } = await upsertunifieduser({
      ...restOfUser,
    });
    // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º _id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫ –∫–∞–∫ sexIQ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º
    const userId = unifieduser._id;

    const amountInCents = Math.round(totalAmountFromFrontend * 100);
    const currencyCodeEUR = 978; // –ö–æ–¥ –≤–∞–ª—é—Ç—ã –¥–ª—è EUR
    console.log(
      `üí∂ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ —Å—É–º–º—É: ${totalAmountFromFrontend} EUR (${amountInCents} —Ü–µ–Ω—Ç–æ–≤)`
    );

    const redirectUrl = `${monoBankRedirectUrl}/${userId}/sexIQ-payment`;
    const monoResponse = await axios.post(
      "https://api.monobank.ua/api/merchant/invoice/create",
      {
        amount: amountInCents,
        ccy: currencyCodeEUR, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –¥–ª—è EUR
        redirectUrl,
        webHookUrl: monoBankWebhookUrl,
      },
      {
        headers: {
          "X-Token": monoBankToken,
          "Content-Type": "application/json",
        },
      }
    );

    const paymentData = {
      invoiceId: monoResponse.data.invoiceId,
      status: "pending",
    };

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ sexIQ.paymentData –Ω–∞–ø—Ä—è–º—É—é
    unifieduser.sexIQ.paymentData = paymentData;

    await updateunifieduserById(unifieduser._id, {
      sexIQ: unifieduser.sexIQ,
    });

    res.status(200).json({
      invoiceId: monoResponse.data.invoiceId,
      pageUrl: monoResponse.data.pageUrl,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã:", error);
    next(error);
  }
};

// ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback MonoBank ----------
export const paymentCallbackHandler = async (req, res, next) => {
  const { invoiceId, status } = req.body;

  if (!invoiceId || !status) {
    console.log("Missing invoiceId or status in callback.");
    return res.status(400).json({ error: "Missing invoiceId or status" });
  }

  try {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º –ø–æ invoiceId –≤ –ø–æ–ª–µ sexIQ
    const unifieduser = await unifiedusersCollection.findOne({
      "sexIQ.paymentData.invoiceId": invoiceId,
    });

    if (!unifieduser) {
      console.log("Invoice not found for invoiceId:", invoiceId);
      return res.status(404).json({ error: "Invoice not found" });
    }

    const statusMap = {
      success: "paid",
      pending: "pending",
      failure: "failed",
    };
    const monoStatus = status.toLowerCase();

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ø–æ–ª–µ sexIQ –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –ø–æ–∏—Å–∫–∞
    if (unifieduser.sexIQ && unifieduser.sexIQ.paymentData) {
      unifieduser.sexIQ.paymentData.status = statusMap[monoStatus] || "failed";

      await updateunifieduserById(unifieduser._id, {
        sexIQ: unifieduser.sexIQ,
      });
      console.log(
        `Unified user ${unifieduser._id} saved successfully AFTER payment callback.`
      );
    } else {
      console.warn(
        `‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è invoiceId ${invoiceId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ unifieduser ${unifieduser._id}`
      );
    }

    res.status(200).json({ message: "Payment status updated" });
  } catch (error) {
    console.error("Error in payment-callback:", error);
    next(error);
  }
};
